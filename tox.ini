[tox]
min_version = 4.23

[testenv]
isolated_build = true
skip_install = true
use_develop = false
allowlist_externals =
    poetry
set_env =
    PROJECT_NAME = mio_mqtt
commands_pre =
    poetry install --no-root --with dev
commands =
    {env:COMMAND}

; Imports Check

[testenv:isort]
base_python = python3.10
set_env =
    {[testenv]set_env}
    COMMAND = isort {env:PROJECT_NAME}

[testenv:isort-check]
base_python = python3.10
set_env =
    {[testenv]set_env}
    COMMAND = isort --check-only {env:PROJECT_NAME}

; TypeCheck

[testenv:mypy-py310]
base_python = python3.10
set_env =
    {[testenv]set_env}
    COMMAND = mypy {env:PROJECT_NAME}

[testenv:mypy-py311]
base_python = python3.11
set_env =
    {[testenv]set_env}
    COMMAND = mypy {env:PROJECT_NAME}

[testenv:mypy-py312]
base_python = python3.12
set_env =
    {[testenv]set_env}
    COMMAND = mypy {env:PROJECT_NAME}

[testenv:mypy-py313]
base_python = python3.13
set_env =
    {[testenv]set_env}
    COMMAND = mypy {env:PROJECT_NAME}

; Lint

[testenv:ruff-check]
base_python = python3.10
set_env =
    {[testenv]set_env}
    COMMAND = ruff check {env:PROJECT_NAME}

; Format

[testenv:ruff-check-fix]
base_python = python3.10
set_env =
    {[testenv]set_env}
    COMMAND = ruff check --fix {env:PROJECT_NAME}

[testenv:ruff-format]
base_python = python3.10
set_env =
    {[testenv]set_env}
    COMMAND = ruff format {env:PROJECT_NAME}

[testenv:]
# Meta Environments
[testenv:mypy]
allowlist_externals =
    poetry
    tox
commands =
    tox -e \
        mypy-py310,\
        mypy-py311,\
        mypy-py312,\
        mypy-py313

